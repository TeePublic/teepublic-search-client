=begin
#TeePublic V3 search Api Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module SwaggerClient
  # design object.
  class Design
    # design id.
    attr_accessor :id

    # design title.
    attr_accessor :title

    # design primary tag.
    attr_accessor :primary_tag

    # design tag.
    attr_accessor :tags

    attr_accessor :active_subclasses

    attr_accessor :browse_sort_order

    attr_accessor :campaign

    attr_accessor :description

    attr_accessor :fourteen

    attr_accessor :sale_end_time

    attr_accessor :sales

    attr_accessor :secondary_tags

    attr_accessor :slug

    attr_accessor :active_status

    attr_accessor :featured_design

    attr_accessor :user

    attr_accessor :owner

    attr_accessor :products

    attr_accessor :subclass

    attr_accessor :explain

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'title' => :'title',
        :'primary_tag' => :'primary_tag',
        :'tags' => :'tags',
        :'active_subclasses' => :'active_subclasses',
        :'browse_sort_order' => :'browse_sort_order',
        :'campaign' => :'campaign',
        :'description' => :'description',
        :'fourteen' => :'fourteen',
        :'sale_end_time' => :'sale_end_time',
        :'sales' => :'sales',
        :'secondary_tags' => :'secondary_tags',
        :'slug' => :'slug',
        :'active_status' => :'active_status',
        :'featured_design' => :'featured_design',
        :'user' => :'user',
        :'owner' => :'owner',
        :'products' => :'products',
        :'subclass' => :'subclass',
        :'explain' => :'explain'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'title' => :'String',
        :'primary_tag' => :'String',
        :'tags' => :'Array<String>',
        :'active_subclasses' => :'Object',
        :'browse_sort_order' => :'Object',
        :'campaign' => :'Object',
        :'description' => :'Object',
        :'fourteen' => :'Object',
        :'sale_end_time' => :'Object',
        :'sales' => :'Object',
        :'secondary_tags' => :'Object',
        :'slug' => :'Object',
        :'active_status' => :'Object',
        :'featured_design' => :'Object',
        :'user' => :'Object',
        :'owner' => :'Object',
        :'products' => :'Object',
        :'subclass' => :'Object',
        :'explain' => :'Object'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'primary_tag')
        self.primary_tag = attributes[:'primary_tag']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'active_subclasses')
        self.active_subclasses = attributes[:'active_subclasses']
      end

      if attributes.has_key?(:'browse_sort_order')
        self.browse_sort_order = attributes[:'browse_sort_order']
      end

      if attributes.has_key?(:'campaign')
        self.campaign = attributes[:'campaign']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'fourteen')
        self.fourteen = attributes[:'fourteen']
      end

      if attributes.has_key?(:'sale_end_time')
        self.sale_end_time = attributes[:'sale_end_time']
      end

      if attributes.has_key?(:'sales')
        self.sales = attributes[:'sales']
      end

      if attributes.has_key?(:'secondary_tags')
        self.secondary_tags = attributes[:'secondary_tags']
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'active_status')
        self.active_status = attributes[:'active_status']
      end

      if attributes.has_key?(:'featured_design')
        self.featured_design = attributes[:'featured_design']
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'products')
        self.products = attributes[:'products']
      end

      if attributes.has_key?(:'subclass')
        self.subclass = attributes[:'subclass']
      end

      if attributes.has_key?(:'explain')
        self.explain = attributes[:'explain']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          title == o.title &&
          primary_tag == o.primary_tag &&
          tags == o.tags &&
          active_subclasses == o.active_subclasses &&
          browse_sort_order == o.browse_sort_order &&
          campaign == o.campaign &&
          description == o.description &&
          fourteen == o.fourteen &&
          sale_end_time == o.sale_end_time &&
          sales == o.sales &&
          secondary_tags == o.secondary_tags &&
          slug == o.slug &&
          active_status == o.active_status &&
          featured_design == o.featured_design &&
          user == o.user &&
          owner == o.owner &&
          products == o.products &&
          subclass == o.subclass &&
          explain == o.explain
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, title, primary_tag, tags, active_subclasses, browse_sort_order, campaign, description, fourteen, sale_end_time, sales, secondary_tags, slug, active_status, featured_design, user, owner, products, subclass, explain].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
