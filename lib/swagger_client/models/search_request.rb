=begin
#TeePublic V3 search Api Documentation

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.48

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module SwaggerClient
  # User search request.
  class SearchRequest
    # Search terms.
    attr_accessor :search_terms

    # Sort order
    attr_accessor :sort

    # Design tags filter.
    attr_accessor :tags_filter

    # product filter
    attr_accessor :product_type

    # gender filter
    attr_accessor :gender

    # artist ids.
    attr_accessor :artist_filter

    # Number of results to return per page.
    attr_accessor :per_page

    # Page offset to fetch.
    attr_accessor :page_offset

    # whether to return explanation of search results.
    attr_accessor :explain

    # whether to return elasticsearch explanation of search results.
    attr_accessor :es_explain

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'search_terms' => :'search_terms',
        :'sort' => :'sort',
        :'tags_filter' => :'tags_filter',
        :'product_type' => :'product_type',
        :'gender' => :'gender',
        :'artist_filter' => :'artist_filter',
        :'per_page' => :'per_page',
        :'page_offset' => :'page_offset',
        :'explain' => :'explain',
        :'es_explain' => :'es_explain'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'search_terms' => :'String',
        :'sort' => :'String',
        :'tags_filter' => :'Array<String>',
        :'product_type' => :'String',
        :'gender' => :'String',
        :'artist_filter' => :'Array<Integer>',
        :'per_page' => :'Integer',
        :'page_offset' => :'Integer',
        :'explain' => :'BOOLEAN',
        :'es_explain' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'search_terms')
        self.search_terms = attributes[:'search_terms']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      else
        self.sort = 'relevance'
      end

      if attributes.has_key?(:'tags_filter')
        if (value = attributes[:'tags_filter']).is_a?(Array)
          self.tags_filter = value
        end
      end

      if attributes.has_key?(:'product_type')
        self.product_type = attributes[:'product_type']
      end

      if attributes.has_key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.has_key?(:'artist_filter')
        if (value = attributes[:'artist_filter']).is_a?(Array)
          self.artist_filter = value
        end
      end

      if attributes.has_key?(:'per_page')
        self.per_page = attributes[:'per_page']
      else
        self.per_page = 36
      end

      if attributes.has_key?(:'page_offset')
        self.page_offset = attributes[:'page_offset']
      else
        self.page_offset = 1
      end

      if attributes.has_key?(:'explain')
        self.explain = attributes[:'explain']
      else
        self.explain = false
      end

      if attributes.has_key?(:'es_explain')
        self.es_explain = attributes[:'es_explain']
      else
        self.es_explain = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      sort_validator = EnumAttributeValidator.new('String', ['relevance', 'popular', 'newest'])
      return false unless sort_validator.valid?(@sort)
      gender_validator = EnumAttributeValidator.new('String', ['unisex', 'mens', 'womens'])
      return false unless gender_validator.valid?(@gender)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort Object to be assigned
    def sort=(sort)
      validator = EnumAttributeValidator.new('String', ['relevance', 'popular', 'newest'])
      unless validator.valid?(sort)
        fail ArgumentError, 'invalid value for "sort", must be one of #{validator.allowable_values}.'
      end
      @sort = sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ['unisex', 'mens', 'womens'])
      unless validator.valid?(gender)
        fail ArgumentError, 'invalid value for "gender", must be one of #{validator.allowable_values}.'
      end
      @gender = gender
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          search_terms == o.search_terms &&
          sort == o.sort &&
          tags_filter == o.tags_filter &&
          product_type == o.product_type &&
          gender == o.gender &&
          artist_filter == o.artist_filter &&
          per_page == o.per_page &&
          page_offset == o.page_offset &&
          explain == o.explain &&
          es_explain == o.es_explain
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [search_terms, sort, tags_filter, product_type, gender, artist_filter, per_page, page_offset, explain, es_explain].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
